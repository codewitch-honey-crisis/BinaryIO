<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BinaryIO</name>
    </assembly>
    <members>
        <member name="T:BIO.BinaryCollectionReader">
            <summary>
            Represents a <see cref="T:BIO.BinaryReader"/> over a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:BIO.BinaryCollectionReader.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a new instance of the reader over the specified byte collection
            </summary>
            <param name="input">The collection of bytes to read</param>
        </member>
        <member name="M:BIO.BinaryCollectionReader.Close">
            <summary>
            Closes the reader and releases any resources held
            </summary>
        </member>
        <member name="M:BIO.BinaryCollectionReader.Read">
            <summary>
            Reads the next character from the input collection
            </summary>
            <returns>The next byte read or a negative value if the cursor is not valid</returns>
        </member>
        <member name="M:BIO.BinaryCollectionReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified number of bytes from the input collection
            </summary>
            <param name="buffer">The buffer to hold the result</param>
            <param name="startIndex">The start index into <paramref name="buffer"/> where copying begins</param>
            <param name="length">The maximum number of bytes to read</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="T:BIO.BinaryReader">
            <summary>
            Represents a reader for binary streams
            </summary>
        </member>
        <member name="P:BIO.BinaryReader.Position">
            <summary>
            Indicates the position of the cursor
            </summary>
        </member>
        <member name="M:BIO.BinaryReader.Read">
            <summary>
            Reads a single byte from the stream, advancing the cursor
            </summary>
            <returns>The next byte or negative if the cursor is invalud</returns>
        </member>
        <member name="M:BIO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a series of bytes from the stream, advancing the cursor
            </summary>
            <param name="buffer">The buffer to fill</param>
            <param name="startIndex">The starting index within the buffer to fill</param>
            <param name="length">The length of the data to read</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:BIO.BinaryReader.Close">
            <summary>
            Closes the reader, releasing any resources held
            </summary>
        </member>
        <member name="P:BIO.BinaryReader.IsLittleEndian">
            <summary>
            Indicates whether or not the platform uses a little-endian byte ordering scheme.
            </summary>
        </member>
        <member name="M:BIO.BinaryReader.ReadByte">
            <summary>
            Reads a byte from the stream
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadBytes(System.Int32)">
            <summary>
            Reads the specified number of bytes from a stream
            </summary>
            <param name="count">The count of bytes to read</param>
            <returns>A byte array containing the bytes</returns>
            <remarks>This throws if the data isn't completely available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadSByte">
            <summary>
            Reads a signed byte from the stream
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadInt16">
            <summary>
            Reads an Int16 value from the stream in platform byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadInt16BE">
            <summary>
            Reads an Int16 value from the stream in big endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadInt16LE">
            <summary>
            Reads an Int16 value from the stream in little endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadUInt16">
            <summary>
            Reads a UInt16 value from the stream in platform byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadUInt16BE">
            <summary>
            Reads a UInt16 value from the stream in big endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadUInt16LE">
            <summary>
            Reads a UInt16 value from the stream in little endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadInt32">
            <summary>
            Reads an Int32 value from the stream in platform byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadInt32BE">
            <summary>
            Reads an Int32 value from the stream in big endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadInt32LE">
            <summary>
            Reads an Int32 value from the stream in little endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadUInt32">
            <summary>
            Reads a UInt32 value from the stream in platform byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadUInt32BE">
            <summary>
            Reads a UInt32 value from the stream in big endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadUInt32LE">
            <summary>
            Reads a UInt32 value from the stream in little endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadInt64">
            <summary>
            Reads an Int64 value from the stream in platform byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadInt64BE">
            <summary>
            Reads an Int64 value from the stream in big endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadInt64LE">
            <summary>
            Reads an Int64 value from the stream in little endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadUInt64">
            <summary>
            Reads a UInt64 value from the stream in platform byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadUInt64BE">
            <summary>
            Reads a UInt64 value from the stream in big endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadUInt64LE">
            <summary>
            Reads a UInt64 value from the stream in little endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadSingle">
            <summary>
            Reads a float value from the stream in platform byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadSingleBE">
            <summary>
            Reads a float value from the stream in big endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadSingleLE">
            <summary>
            Reads a float value from the stream in little endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadDouble">
            <summary>
            Reads a double value from the stream in platform byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadDoubleBE">
            <summary>
            Reads a double value from the stream in big endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadDoubleLE">
            <summary>
            Reads a double value from the stream in little endian byte order
            </summary>
            <returns>The value read</returns>
            <remarks>This throws if the data isn't available</remarks>
        </member>
        <member name="M:BIO.BinaryReader.ReadFixedString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads a fixed length string from the input
            </summary>
            <param name="byteLength">The length of the string, in bytes</param>
            <param name="encoding">The encoding, or default UTF8</param>
            <returns>The string that was read</returns>
        </member>
        <member name="T:BIO.BinaryStreamReader">
            <summary>
            Represents a <see cref="T:BIO.BinaryReader"/> over a <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="M:BIO.BinaryStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance with the specified input stream
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:BIO.BinaryStreamReader.#ctor(System.String)">
            <summary>
            Creates a new instance with the specified input file
            </summary>
            <param name="filename">The filename to read</param>
        </member>
        <member name="M:BIO.BinaryStreamReader.Close">
            <summary>
            Closes the reader, releasing any resources held
            </summary>
        </member>
        <member name="M:BIO.BinaryStreamReader.Read">
            <summary>
            Reads a byte from the input stream
            </summary>
            <returns>The byte, or a negative value if the cursor is invalid</returns>
        </member>
        <member name="M:BIO.BinaryStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified number of bytes from the input stream
            </summary>
            <param name="buffer">The buffer to hold the data</param>
            <param name="startIndex">The starting index within <paramref name="buffer"/> where copying begins</param>
            <param name="length">The maximum amount of data to read</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="T:BIO.BinaryStreamWriter">
            <summary>
            Represents a <see cref="T:BIO.BinaryWriter"/> over a <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="M:BIO.BinaryStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the writer over the specified stream
            </summary>
            <param name="output">The stream to write to</param>
        </member>
        <member name="M:BIO.BinaryStreamWriter.Write(System.Byte)">
            <summary>
            Writes a byte to the output stream
            </summary>
            <param name="data">The byte to write</param>
        </member>
        <member name="M:BIO.BinaryStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a series of bytes to the output stream
            </summary>
            <param name="buffer">The buffer that contains the source bytes</param>
            <param name="startIndex">The start index into the buffer at which writing begins</param>
            <param name="length">The length to bytes to write</param>
        </member>
        <member name="M:BIO.BinaryStreamWriter.Close">
            <summary>
            Closes the writer and releases any resources used
            </summary>
        </member>
        <member name="T:BIO.BinaryWriter">
            <summary>
            Represents a writer for writing binary data to an output stream
            </summary>
        </member>
        <member name="M:BIO.BinaryWriter.Write(System.Byte)">
            <summary>
            Writes a byte to the output stream
            </summary>
            <param name="data">The byte to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a series of bytes to the output stream
            </summary>
            <param name="buffer">The buffer that contains the source data</param>
            <param name="startIndex">The start index into the buffer at which writing begins</param>
            <param name="length">The length of the data to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.Close">
            <summary>
            Closes the writer and releases any resources held
            </summary>
        </member>
        <member name="M:BIO.BinaryWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the output stream
            </summary>
            <param name="value">The value to write</param>
            <remarks>This method is equivelent to Write but is provided for completeness and symmetry with BinaryReader</remarks>
        </member>
        <member name="M:BIO.BinaryWriter.WriteSbyte(System.SByte)">
            <summary>
            Writes a signed byte to the output stream
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes a series of bytes to the output stream
            </summary>
            <param name="values">The values to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteInt16(System.Int16)">
            <summary>
            Writes a signed 16-bit integer to the output stream in platform byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteInt16BE(System.Int16)">
            <summary>
            Writes a signed 16-bit integer to the output stream in big-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteInt16LE(System.Int16)">
            <summary>
            Writes a signed 16-bit integer to the output stream in little-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteUInt16(System.UInt16)">
            <summary>
            Writes a unsigned 16-bit integer to the output stream in platform byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteUInt16BE(System.UInt16)">
            <summary>
            Writes a unsigned 16-bit integer to the output stream in big-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteUInt16LE(System.UInt16)">
            <summary>
            Writes a unsigned 16-bit integer to the output stream in little-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteInt32(System.Int32)">
            <summary>
            Writes a signed 32-bit integer to the output stream in platform byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteInt32BE(System.Int32)">
            <summary>
            Writes a signed 32-bit integer to the output stream in big-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteInt32LE(System.Int32)">
            <summary>
            Writes a signed 32-bit integer to the output stream in little-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteUInt32(System.UInt32)">
            <summary>
            Writes a unsigned 32-bit integer to the output stream in platform byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteUInt32BE(System.UInt32)">
            <summary>
            Writes a unsigned 32-bit integer to the output stream in big-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteUInt32LE(System.UInt32)">
            <summary>
            Writes a unsigned 32-bit integer to the output stream in little-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteInt64(System.Int64)">
            <summary>
            Writes a signed 64-bit integer to the output stream in platform byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteInt64BE(System.Int64)">
            <summary>
            Writes a signed 64-bit integer to the output stream in big-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteInt64LE(System.Int64)">
            <summary>
            Writes a signed 64-bit integer to the output stream in little-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteUInt64(System.UInt64)">
            <summary>
            Writes a unsigned 64-bit integer to the output stream in platform byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteUInt64BE(System.UInt64)">
            <summary>
            Writes a unsigned 64-bit integer to the output stream in big-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteUInt64LE(System.UInt64)">
            <summary>
            Writes a unsigned 64-bit integer to the output stream in little-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteSingle(System.Single)">
            <summary>
            Writes a 32-bit floating point value to the output stream in platform byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteSingleBE(System.Single)">
            <summary>
            Writes a 32-bit floating point value to the output stream in big-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteSingleLE(System.Single)">
            <summary>
            Writes a 32-bit floating point value to the output stream in little-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteDouble(System.Double)">
            <summary>
            Writes a 64-bit floating point value to the output stream in platform byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteDoubleBE(System.Double)">
            <summary>
            Writes a 64-bit floating point value to the output stream in big-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteDoubleLE(System.Double)">
            <summary>
            Writes a 64-bit floating point value to the output stream in little-endian byte order
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:BIO.BinaryWriter.WriteString(System.String,System.Text.Encoding)">
            <summary>
            Writes a string to the output
            </summary>
            <param name="text">The text to write</param>
            <param name="encoding">The encoding to use or null for UTF-8</param>
            <remarks>Typically the string length must be prepended or otherwise known for this to be able to be read back</remarks>
        </member>
        <member name="T:BIO.ByteOrderUtility">
            <summary>
            Provides low level byte ordering functionality
            </summary>
        </member>
        <member name="P:BIO.ByteOrderUtility.IsLittleEndian">
            <summary>
            Indicates whether or not the platform uses a little-endian byte ordering scheme
            </summary>
        </member>
        <member name="M:BIO.ByteOrderUtility.Swap(System.UInt16)">
            <summary>
            Swaps byte order
            </summary>
            <param name="x">The word</param>
            <returns>A word with swapped byte order</returns>
        </member>
        <member name="M:BIO.ByteOrderUtility.Swap(System.UInt32)">
            <summary>
            Swaps byte order
            </summary>
            <param name="x">The dword</param>
            <returns>A dword with swapped byte order</returns>
        </member>
        <member name="M:BIO.ByteOrderUtility.Swap(System.Int16)">
            <summary>
            Swaps byte order
            </summary>
            <param name="x">The word</param>
            <returns>A word with swapped byte order</returns>
        </member>
        <member name="M:BIO.ByteOrderUtility.Swap(System.Int32)">
            <summary>
            Swaps byte order
            </summary>
            <param name="x">The dword</param>
            <returns>A dword with swapped byte order</returns>
        </member>
        <member name="M:BIO.ByteOrderUtility.Swap(System.UInt64)">
            <summary>
            Swaps byte order
            </summary>
            <param name="x">The qword</param>
            <returns>A qword with swapped byte order</returns>
        </member>
        <member name="M:BIO.ByteOrderUtility.Swap(System.Int64)">
            <summary>
            Swaps byte order
            </summary>
            <param name="x">The qword</param>
            <returns>A qword with swapped byte order</returns>
        </member>
        <member name="M:BIO.ByteOrderUtility.Swap(System.Single)">
            <summary>
            Swaps byte order
            </summary>
            <param name="x">The float</param>
            <returns>A float with swapped byte order</returns>
        </member>
        <member name="M:BIO.ByteOrderUtility.Swap(System.Double)">
            <summary>
            Swaps byte order
            </summary>
            <param name="x">The double</param>
            <returns>A double with swapped byte order</returns>
        </member>
    </members>
</doc>
